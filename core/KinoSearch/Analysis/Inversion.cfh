parcel KinoSearch cnick Kino;

/** 
 * A collection of Tokens.
 *
 * An Inversion is a collection of Token objects which you can add to, then
 * iterate over. 
 */
class KinoSearch::Analysis::Inversion inherits KinoSearch::Object::Obj {

    Token    **tokens;
    uint32_t   size;
    uint32_t   cap;
    uint32_t   cur;                   /* pointer to current token */
    bool_t     inverted;              /* inversion has been inverted */
    uint32_t  *cluster_counts;        /* counts per unique text */
    uint32_t   cluster_counts_size;   /* num unique texts */

    /** 
     * @param seed An initial Token to start things off, which may be NULL.
     */
    inert incremented Inversion* 
    new(Token *seed = NULL);

    /** Tack a token onto the end of the Inversion.
     *
     * @param token A Token.
     */
    void 
    Append(Inversion *self, decremented Token *token);

    /** Return the next token in the Inversion until out of tokens.
     */
    nullable Token* 
    Next(Inversion *self);

    /** Reset the Inversion's iterator, so that the next call to next()
     * returns the first Token in the inversion.
     */
    void 
    Reset(Inversion *self);

    /** Assign positions to constituent Tokens, tallying up the position
     * increments.  Sort the tokens first by token text and then by position
     * ascending.
     */
    void 
    Invert(Inversion *self);

    /** Return a pointer to the next group of like Tokens.  The number of
     * tokens in the cluster will be placed into <code>count</code>.
     *
     * @param count The number of tokens in the cluster.
     */
    nullable Token** 
    Next_Cluster(Inversion *self, uint32_t *count);

    uint32_t
    Get_Size(Inversion *self);

    public void 
    Destroy(Inversion *self);
}

/* Copyright 2006-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


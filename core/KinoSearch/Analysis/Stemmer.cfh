parcel KinoSearch cnick Kino;

__C__
typedef unsigned char sb_symbol;
struct sb_stemmer;

typedef struct sb_stemmer*
(*kino_Stemmer_sb_stemmer_new_t)(const char *algorithm, const char *encoding);
typedef void
(*kino_Stemmer_sb_stemmer_delete_t)(struct sb_stemmer *snowstemmer);
typedef sb_symbol*
(*kino_Stemmer_sb_stemmer_stem_t)(struct sb_stemmer *snowstemmer, 
    const sb_symbol *text, int len);
typedef int
(*kino_Stemmer_sb_stemmer_length_t)(struct sb_stemmer *snowstemmer);
extern kino_Stemmer_sb_stemmer_new_t    kino_Stemmer_sb_stemmer_new;
extern kino_Stemmer_sb_stemmer_delete_t kino_Stemmer_sb_stemmer_delete;
extern kino_Stemmer_sb_stemmer_stem_t   kino_Stemmer_sb_stemmer_stem;
extern kino_Stemmer_sb_stemmer_length_t kino_Stemmer_sb_stemmer_length;
#ifdef KINO_USE_SHORT_NAMES
  #define Stemmer_sb_stemmer_new_t    kino_Stemmer_sb_stemmer_new_t
  #define Stemmer_sb_stemmer_delete_t kino_Stemmer_sb_stemmer_delete_t
  #define Stemmer_sb_stemmer_stem_t   kino_Stemmer_sb_stemmer_stem_t
  #define Stemmer_sb_stemmer_length_t kino_Stemmer_sb_stemmer_length_t
  #define Stemmer_sb_stemmer_new      kino_Stemmer_sb_stemmer_new
  #define Stemmer_sb_stemmer_delete   kino_Stemmer_sb_stemmer_delete
  #define Stemmer_sb_stemmer_stem     kino_Stemmer_sb_stemmer_stem
  #define Stemmer_sb_stemmer_length   kino_Stemmer_sb_stemmer_length
#endif
__END_C__

/** Reduce related words to a shared root.
 * 
 * Stemmer is an L<Analyzer|KinoSearch::Analysis::Analyzer> which reduces
 * related words to a root form (using the "Snowball" stemming library).  For
 * instance, "horse", "horses", and "horsing" all become "hors" -- so that a
 * search for 'horse' will also match documents containing 'horses' and
 * 'horsing'.
 */ 

class KinoSearch::Analysis::Stemmer inherits KinoSearch::Analysis::Analyzer 
    : dumpable {

    void *snowstemmer;
    CharBuf *language;

    inert incremented Stemmer* 
    new(const CharBuf *language);

    /**
     * @param language A two-letter ISO code identifying a language supported
     * by Snowball.
     */
    public inert Stemmer* 
    init(Stemmer *self, const CharBuf *language);

    public incremented Inversion*
    Transform(Stemmer *self, Inversion *inversion);

    public incremented Hash*
    Dump(Stemmer *self);

    public incremented Stemmer*
    Load(Stemmer *self, Obj *dump);

    public bool_t
    Equals(Stemmer *self, Obj *other);

    /** Load the Snowball stemming library.  Called by the constructor.
     */
    inert void
    load_snowball();

    public void
    Destroy(Stemmer *self);
}

/* Copyright 2005-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


parcel KinoSearch cnick Kino;

class KinoSearch::Index::DeletionsReader cnick DelReader
    inherits KinoSearch::Index::DataReader {

    inert DeletionsReader*
    init(DeletionsReader *self, Schema *schema = NULL, Folder *folder = NULL,
         Snapshot *snapshot = NULL, VArray *segments = NULL, 
         int32_t seg_tick = -1);
    
    /** Return the number of docs which have been marked as deleted in this
     * segment.
     */
    abstract int32_t 
    Del_Count(DeletionsReader *self);

    /** Return a Matcher which iterates over the set of all deleted doc nums
     * for this segment.
     */
    abstract incremented Matcher*
    Iterator(DeletionsReader *self);

    public incremented nullable DeletionsReader*
    Aggregator(DeletionsReader *self, VArray *readers, I32Array *offsets);
}

class KinoSearch::Index::PolyDeletionsReader cnick PolyDelReader
    inherits KinoSearch::Index::DeletionsReader {

    VArray   *readers;
    I32Array *offsets;
    int32_t   del_count;

    inert incremented PolyDeletionsReader*
    new(VArray *readers, I32Array *offsets);

    inert PolyDeletionsReader*
    init(PolyDeletionsReader *self, VArray *readers, I32Array *offsets);

    int32_t 
    Del_Count(PolyDeletionsReader *self);

    incremented Matcher*
    Iterator(PolyDeletionsReader *self);

    public void
    Close(PolyDeletionsReader *self);

    public void
    Destroy(PolyDeletionsReader *self);
}

class KinoSearch::Index::DefaultDeletionsReader cnick DefDelReader
    inherits KinoSearch::Index::DeletionsReader {

    BitVector *deldocs;
    int32_t    del_count;

    inert incremented DefaultDeletionsReader*
    new(Schema *schema, Folder *folder, Snapshot *snapshot, VArray *segments,
        int32_t seg_tick);

    inert DefaultDeletionsReader*
    init(DefaultDeletionsReader *self, Schema *schema, Folder *folder,
         Snapshot *snapshot, VArray *segments, int32_t seg_tick);

    int32_t 
    Del_Count(DefaultDeletionsReader *self);

    incremented Matcher*
    Iterator(DefaultDeletionsReader *self);

    nullable BitVector*
    Read_Deletions(DefaultDeletionsReader *self);

    public void
    Close(DefaultDeletionsReader *self);

    public void
    Destroy(DefaultDeletionsReader *self);
}

/* Copyright 2006-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


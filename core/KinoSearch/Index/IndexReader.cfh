parcel KinoSearch cnick Kino;

/** Read from an inverted index.
 * 
 * IndexReader is the interface through which Searchers access the content of
 * an index.
 * 
 * IndexReader objects always represent a point-in-time view of an index as it
 * existed at the moment the reader was created.  If you want search results
 * to reflect modifications to an index, you must create a new IndexReader
 * after the update process completes.
 *
 * IndexReaders are composites; most of the work is done by individual
 * L<DataReader|KinoSearch::Index::DataReader> sub-components, which may be
 * accessed via Fetch() and Obtain().  The most efficient and powerful access
 * to index data happens at the segment level via
 * L<SegReader|KinoSearch::Index::SegReader>'s sub-components.
 */

class KinoSearch::Index::IndexReader cnick IxReader
    inherits KinoSearch::Index::DataReader {

    Hash            *components;
    IndexManager    *manager;
    Lock            *read_lock;
    Lock            *deletion_lock;

    public inert nullable IndexReader*
    init(IndexReader *self, Schema *schema = NULL, Folder *folder, 
         Snapshot *snapshot = NULL, VArray *segments = NULL, 
         int32_t seg_tick = -1, IndexManager *manager = NULL);

    public inert incremented nullable IndexReader*
    open(Obj *index, Snapshot *snapshot = NULL, 
         IndexManager *manager = NULL);

    /** IndexReader is an abstract base class; open() returns the IndexReader
     * subclass PolyReader, which channels the output of 0 or more SegReaders.
     *
     * @param index Either a string filepath or a Folder.  
     * @param snapshot A Snapshot.  If not supplied, the most recent snapshot
     * file will be used.
     * @param manager An L<IndexManager|KinoSearch::Index::IndexManager>.
     * Read-locking is off by default; supplying this argument turns it on.
     */
    public inert nullable IndexReader*
    do_open(IndexReader *self, Obj *index, Snapshot *snapshot = NULL, 
            IndexManager *manager = NULL);

    /** Return the maximum number of documents available to the reader, which
     * is also the highest possible internal document id.  Documents which
     * have been marked as deleted but not yet purged from the index are
     * included in this count.
     */
    public abstract int32_t
    Doc_Max(IndexReader *self);

    /** Return the number of documents available to the reader, subtracting
     * any that are marked as deleted.
     */
    public abstract int32_t
    Doc_Count(IndexReader *self);

    /** Return the number of documents which have been marked as deleted but
     * not yet purged from the index.
     */
    public abstract int32_t
    Del_Count(IndexReader *self);

    /** Return an array with one entry for each segment, corresponding to
     * segment doc_id start offset.
     */
    public abstract incremented I32Array*
    Offsets(IndexReader *self);

    /** Return an array of all the SegReaders represented within the
     * IndexReader.
     */
    public abstract incremented VArray*
    Seg_Readers(IndexReader *self);

    /** Fetch a component, or throw an error if the component can't be found. 
     *
     * @param api The name of the DataReader subclass that the desired
     * component must implement.
     */
    public DataReader*
    Obtain(IndexReader *self, const CharBuf *api);

    /** Fetch a component, or return NULL if the component can't be found. 
     * 
     * @param api The name of the DataReader subclass that the desired
     * component must implement.
     */
    public nullable DataReader*
    Fetch(IndexReader *self, const CharBuf *api);

    public void
    Close(IndexReader *self);

    Hash*
    Get_Components(IndexReader *self);

    public void
    Destroy(IndexReader *self);
}

/* Copyright 2006-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


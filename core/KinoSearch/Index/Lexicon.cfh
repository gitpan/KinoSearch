parcel KinoSearch cnick Kino;

/** Iterator for a field's terms.
 * 
 * A Lexicon is an iterator which provides access to all the unique terms for
 * a given field in sorted order.
 * 
 * If an index consists of two documents with a 'content' field holding "three
 * blind mice" and "three musketeers" respectively, then iterating through the
 * 'content' field's lexicon would produce this list:
 * 
 *     blind
 *     mice
 *     musketeers
 *     three
 */

class KinoSearch::Index::Lexicon cnick Lex inherits KinoSearch::Object::Obj {

    CharBuf *field;

    public inert Lexicon*
    init(Lexicon *self, const CharBuf *field);

    public void
    Destroy(Lexicon *self);

    /** Seek the Lexicon to the first iterator state which is greater than or
     * equal to <code>target</code>.  If <code>target</code> is NULL,
     * reset the iterator.
     */
    public abstract void
    Seek(Lexicon *self, Obj *target = NULL);

    /** Proceed to the next term.  
     * 
     * @return true until the iterator is exhausted, then false.
     */
    public abstract bool_t
    Next(Lexicon *self);

    /** Reset the iterator.  Next() must be called to proceed to the first
     * element.
     */
    public abstract void
    Reset(Lexicon *self);

    /** Return the number of documents that the current term appears in at
     * least once.  Deleted documents may be included in the count. 
     */
    public abstract int32_t
    Doc_Freq(Lexicon *self);

    /** Return the current term, or NULL if the iterator is not in a valid
     * state.
     */
    public abstract nullable Obj*
    Get_Term(Lexicon *self);

    public CharBuf*
    Get_Field(Lexicon *self);
}

/* Copyright 2006-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


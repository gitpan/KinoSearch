parcel KinoSearch cnick Kino;

/** Multi-segment implementation of IndexReader.
 *
 * PolyReader conflates index data from multiple segments.  For instance, if
 * an index contains three segments with 10 documents each, PolyReader's
 * Doc_Max() method will return 30.
 * 
 * Some of PolyReader's DataReader components may be less efficient or
 * complete than the single-segment implementations accessed via SegReader.
 */
class KinoSearch::Index::PolyReader extends KinoSearch::Index::IndexReader {

    VArray   *sub_readers;
    i32_t     doc_max;
    i32_t     del_count;
    I32Array *offsets;

    public static incremented PolyReader*
    open(Obj *index, Snapshot *snapshot = NULL, 
         LockFactory *lock_factory = NULL);

    /**
     * @param index Either a string filepath or a L<KinoSearch::Folder>.  
     * @param snapshot A Snapshot.  If not supplied, the most recent snapshot
     * file will be used.
     * @param lock_factory A L<KinoSearch::Store::LockFactory>.  Read-locking
     * is off by default; supplying this argument turns it on.
     */ 
    public static PolyReader*
    do_open(PolyReader *self, Obj *index, Snapshot *snapshot = NULL, 
            LockFactory *lock_factory = NULL); 

    public static incremented PolyReader*
    new(Schema *schema = NULL, Folder *folder, Snapshot *snapshot = NULL, 
        LockFactory *lock_factory = NULL, VArray *sub_readers = NULL);

    public static PolyReader*
    init(PolyReader *self, Schema *schema = NULL, Folder *folder, 
         Snapshot *snapshot = NULL, LockFactory *lock_factory = NULL, 
         VArray *sub_readers = NULL);

    /** Attempt to open a SegReader for each Segment that the Snapshot knows
     * about.  If an exception occurs, catch it and return its error message.  If
     * the opening succeeds, return a VArray full of SegReaders.
     */
    incremented Obj*
    Try_Open_SegReaders(PolyReader *self, VArray *segments);

    /** Attempt to read a snapshot file.  If the operation succeeds, return
     * NULL.  If an exception occurs, catch it and return its error message.
     */
    static incremented CharBuf*
    try_read_snapshot(Snapshot *snapshot, Folder *folder, 
                      const CharBuf *filename);

    static CharBuf* race_condition_debug1;
    static i32_t    debug1_num_passes;
    
    /** Determine which sub-reader a document id belongs to.
     */
    static u32_t
    sub_tick(I32Array *offsets, i32_t doc_id);

    public i32_t
    Doc_Max(PolyReader *self);

    public i32_t
    Doc_Count(PolyReader *self);

    public i32_t
    Del_Count(PolyReader *self);

    public incremented I32Array*
    Offsets(PolyReader *self);

    public incremented VArray*
    Seg_Readers(PolyReader *self);

    VArray*
    Get_Seg_Readers(PolyReader *self);

    public void
    Close(PolyReader *self);

    void
    Destroy(PolyReader *self);
}

/* Copyright 2006-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


parcel KinoSearch cnick Kino;

/** Vessel holding statistical data for a posting.
 *
 * A Posting, in KinoSearch, is a vessel which stores information about a
 * term-document match.  (See L<KinoSearch::Docs::IRTheory> for the
 * academic definition of "posting".)
 * 
 * Subclasses include
 * L<MatchPosting|KinoSearch::Index::Posting::MatchPosting>, the simplest
 * posting format, and
 * L<ScorePosting|KinoSearch::Index::Posting::ScorePosting>, the default.
 */
class KinoSearch::Index::Posting cnick Post inherits KinoSearch::Util::Stepper {

    int32_t doc_id;

    public inert Posting*
    init(Posting *self);

    /** Create a RawPosting object, suitable for index-time sorting.  
     *
     * Updates the state of the document id, but nothing else.
     */
    abstract incremented RawPosting*
    Read_Raw(Posting *self, InStream *instream, int32_t last_doc_id, 
             CharBuf *term_text, MemoryPool *mem_pool);

    /** Process an Inversion into RawPosting objects and add them all to the
     * supplied PostingPool.
     */
    abstract void
    Add_Inversion_To_Pool(Posting *self, PostingPool *post_pool, 
                          Inversion *inversion, FieldType *type, 
                          int32_t doc_id, float doc_boost, 
                          float length_norm);

    public void
    Set_Doc_ID(Posting *self, int32_t doc_id);

    public int32_t 
    Get_Doc_ID(Posting *self);

    /** Factory method for creating a Matcher.
     */
    abstract incremented Matcher*
    Make_Matcher(Posting *self, Similarity *sim, PostingList *plist, 
                 Compiler *compiler, bool_t need_score);
}

abstract class KinoSearch::Index::Posting::PostingWriter cnick PostWriter
    inherits KinoSearch::Index::DataWriter {

    int32_t field_num;

    inert PostingWriter*
    init(PostingWriter *self, Schema *schema, Snapshot *snapshot, 
         Segment *segment, PolyReader *polyreader, int32_t field_num);

    /** Take a RawPosting that was flattened earlier and write it to the
     * index. */
    abstract void
    Write_Posting(PostingWriter *self, RawPosting *posting);

    /** Start a new term.  Update the TermInfo to reflect the state of the
     * PostingWriter. 
     */
    abstract void
    Start_Term(PostingWriter *self, TermInfo *tinfo);

    /** Update the TermInfo to reflect the internal state of the
     * PostingWriter so that skip information can be written. 
     * 
     * TODO: This is an ugly hack which needs refactoring.
     */
    abstract void
    Update_Skip_Info(PostingWriter *self, TermInfo *tinfo);
}

/* Copyright 2007-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


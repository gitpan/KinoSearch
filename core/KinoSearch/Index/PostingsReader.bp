parcel KinoSearch cnick Kino;

/** Read postings data.
 * 
 * PostingsReaders produce L<PostingList|KinoSearch::Index::PostingList>
 * objects which convey document matching information.
 */
class KinoSearch::Index::PostingsReader cnick PostReader
    extends KinoSearch::Index::DataReader {

    inert PostingsReader*
    init(PostingsReader *self, Schema *schema = NULL, Folder *folder = NULL,
         Snapshot *snapshot = NULL, VArray *segments = NULL, 
         i32_t seg_tick = -1);

    /** Returns a PostingList, or NULL if either <code>field</code> is NULL or
     * <code>field</code> is not present in any documents.
     *   
     * @param field A field name.
     * @param term If supplied, the PostingList will be pre-located to this
     * term using Seek(). 
     */  
    public abstract incremented PostingList*
    Posting_List(PostingsReader *self, const CharBuf *field = NULL,
                 Obj *term = NULL);

    abstract LexiconReader*
    Get_Lex_Reader(PostingsReader *self);

    public incremented PostingsReader*
    Aggregator(PostingsReader *self, VArray *readers, I32Array *offsets);
}

class KinoSearch::Index::PolyPostingsReader cnick PolyPostReader
    extends KinoSearch::Index::PostingsReader {

    VArray   *readers;
    I32Array *offsets;

    inert incremented PolyPostingsReader*
    new(VArray *readers, I32Array *offsets);

    inert PolyPostingsReader*
    init(PolyPostingsReader *self, VArray *readers, I32Array *offsets);

    public incremented PostingList*
    Posting_List(PolyPostingsReader *self, const CharBuf *field = NULL,
                 Obj *term = NULL);

    public void
    Close(PolyPostingsReader *self);

    void
    Destroy(PolyPostingsReader *self);
}

class KinoSearch::Index::DefaultPostingsReader cnick DefPostReader
    extends KinoSearch::Index::PostingsReader {

    LexiconReader *lex_reader;

    /* Constructors.
     */
    inert incremented DefaultPostingsReader*
    new(Schema *schema, Folder *folder, Snapshot *snapshot, VArray *segments,
        i32_t seg_tick, LexiconReader *lex_reader);

    inert DefaultPostingsReader*
    init(DefaultPostingsReader *self, Schema *schema, Folder *folder,
         Snapshot *snapshot, VArray *segments, i32_t seg_tick, 
         LexiconReader *lex_reader);

    public incremented SegPostingList*
    Posting_List(DefaultPostingsReader *self, const CharBuf *field = NULL,
                 Obj *term = NULL);

    LexiconReader*
    Get_Lex_Reader(DefaultPostingsReader *self);

    public void
    Close(DefaultPostingsReader *self);

    void
    Destroy(DefaultPostingsReader *self);
}

/* Copyright 2006-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


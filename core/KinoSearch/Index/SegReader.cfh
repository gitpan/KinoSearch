parcel KinoSearch cnick Kino;

/** Single-segment IndexReader.
 * 
 * SegReader interprets the data within a single segment of an index.
 * 
 * Generally speaking, only advanced users writing subclasses which manipulate
 * data at the segment level need to deal with the SegReader API directly.  
 * 
 * Nearly all of SegReader's functionality is implemented by pluggable
 * components spawned by Architecture's factory methods.
 */

class KinoSearch::Index::SegReader inherits KinoSearch::Index::IndexReader {

    int32_t  doc_max;
    int32_t  del_count;
    int64_t  seg_num;
    CharBuf *seg_name;

    inert incremented SegReader*
    new(Schema *schema, Folder *folder, Snapshot *snapshot = NULL,
        VArray *segments, int32_t seg_tick);

    /**
     * @param schema A Schema.
     * @param folder A Folder.
     * @param snapshot A Snapshot, which must contain the files needed by the
     * Segment.
     * @param segments An array of Segment objects.
     * @param seg_tick The array index of the Segment object within
     * <code>segments</code> that this particular SegReader is assigned to.
     */
    inert SegReader*
    init(SegReader *self, Schema *schema, Folder *folder, 
         Snapshot *snapshot = NULL, VArray *segments, int32_t seg_tick);

    public void
    Destroy(SegReader *self);

    /** Constructor helper.
     *
     * @return either NULL indicating success, or a CharBuf with an error
     * message.
     */
    incremented CharBuf*
    Try_Init_Components(SegReader *self);

    /** Add a component to the SegReader.  Using the same <code>api</code> key
     * twice is an error.
     * 
     * @param api The name of the DataReader subclass that defines the
     * interface implemented by <code>component</code>.
     * @param component A DataReader.
     */
    public void
    Register(SegReader *self, const CharBuf *api, 
             decremented DataReader *component);

    /** Return the name of the segment. 
     */
    public CharBuf*
    Get_Seg_Name(SegReader *self);

    /** Return the number of the segment. 
     */
    public int64_t
    Get_Seg_Num(SegReader *self);

    public int32_t
    Del_Count(SegReader *self);

    public int32_t
    Doc_Max(SegReader *self);

    public int32_t
    Doc_Count(SegReader *self);
    
    public incremented I32Array*
    Offsets(SegReader *self);

    public incremented VArray*
    Seg_Readers(SegReader *self);
}

/* Copyright 2006-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


parcel KinoSearch cnick Kino;

/** Build inverted indexes.
 *
 * The Indexer class is KinoSearch's primary tool for managing the content of
 * inverted indexes, which may later be searched using
 * L<KinoSearch::Searcher>.
 *
 * Only one Indexer may write to an index at a time.  If a write lock cannot
 * be secured, new() will throw an exception.
 * 
 * If an index is located on a shared volume, each writer application must
 * identify itself by passing a L<LockFactory|KinoSearch::Store::LockFactory>
 * to Indexer's constructor or index corruption will occur.  See LockFactory's
 * documentation for a detailed explanation.
 *
 * Note: at present, Delete_By_Term() and Delete_By_Query() only affect
 * documents which had been previously committed to the index -- and not any
 * documents added this indexing session but not yet committed.  This may
 * change in a future update.
 */
class KinoSearch::Indexer extends KinoSearch::Obj {

    Schema            *schema;
    Folder            *folder;
    Segment           *segment;
    IndexManager      *manager;
    LockFactory       *lock_factory;
    PolyReader        *polyreader;
    Snapshot          *snapshot;
    SegWriter         *seg_writer;
    DeletionsWriter   *del_writer;
    FilePurger        *file_purger;
    Lock              *write_lock;
    Doc               *stock_doc;
    CharBuf           *snapfile;
    bool_t             truncate;
    bool_t             optimized;
    bool_t             needs_commit;
    bool_t             prepared;

    public static i32_t TRUNCATE;
    public static i32_t CREATE;

    public static incremented Indexer*
    new(Schema *schema = NULL, Obj *index, IndexManager *manager = NULL, 
        LockFactory *lock_factory = NULL, i32_t flags = 0);

    /** Open a new Indexer.  If the index already exists, update it.
     *
     * @param schema A Schema.
     * @param index Either a string filepath or a Folder.
     * @param lock_factory A LockFactory.
     * @param flags Flags governing behavior.  
     */
    public static Indexer*
    init(Indexer *self, Schema *schema = NULL, Obj *index, 
         IndexManager *manager = NULL, LockFactory *lock_factory = NULL, 
         i32_t flags = 0);

    /** Add a document to the index.  
     *
     * @param doc A KinoSearch::Doc object.
     * @param boost A floating point weight which affects how this document
     * scores.
     */
    public void
    Add_Doc(Indexer *self, Doc *doc, float boost = 1.0);

    /** Absorb an existing index into this one.  The two indexes must
     * have matching Schemas.
     * 
     * @param index Either an index path name or a Folder.
     */
    public void
    Add_Index(Indexer *self, Obj *index);

    /** Mark documents which contain the supplied term as deleted, so that
     * they will be excluded from search results and eventually removed
     * altogether.  The change is not apparent to search apps until after
     * Commit() is called.
     *
     * @param field The name of an indexed field. (If it is not spec'd as
     * <code>indexed</code>, an error will occur.)
     * @param term The term which identifies docs to be marked as deleted.  If
     * <code>field</code> is associated with an Analyzer, <code>term</code>
     * will be processed automatically (so don't pre-process it yourself).
     */
    public void
    Delete_By_Term(Indexer *self, CharBuf *field, Obj *term);

    /** Mark documents which match the supplied Query as deleted.
     *
     * @param query A L<Query|KinoSearch::Search::Query>.
     */
    public void
    Delete_By_Query(Indexer *self, Query *query);

    /** Collapse the index to its most compact form.  This may take a while,
     * but will yield the fastest queries at search time.
     */
    public void
    Optimize(Indexer *self);

    /** Commit any changes made to the index.  Until this is called, none of
     * the changes made during an indexing session are permanent.
     *
     * Calling Commit() invalidates the Indexer, so if you want to make more
     * changes you'll need a new one.
     */
    public void
    Commit(Indexer *self);

    /** Perform the expensive setup for Commit() in advance, so that Commit()
     * completes quickly.  (If Prepare_Commit() is not called explicitly by
     * the user, Commit() will call it internally.)
     */
    public void
    Prepare_Commit(Indexer *self);

    /** Accessor for seg_writer member var.
     */
    public SegWriter*
    Get_Seg_Writer(Indexer *self);

    void
    Destroy(Indexer *self);
}

/* Copyright 2007-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


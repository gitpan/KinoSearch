parcel KinoSearch cnick Kino;

/** Base class for all KinoSearch objects.
 */

class KinoSearch::Obj {

    VTable *vtable;
    boil_ref_t ref;

    /** Abstract initializer.
     */
    public static Obj*
    init(Obj* self);

    /** Zero argument constructor.
     */
    public abstract incremented Obj*
    Make(Obj *self);

    /** Return an object's refcount.
     */
    u32_t
    Get_RefCount(Obj *self);

    /** Increment an object's refcount.
     * 
     * @return The object, allowing an assignment idiom.
     */
    public incremented Obj* 
    Inc_RefCount(Obj *self);

    /** Utility function: manufacture a new host-language wrapper for this
     * object.
     */
    static void*
    wrap(Obj *obj);

    /** Decrement an object's refcount, calling destroy if it hits 0.
     * 
     * @return the modified refcount.
     */
    u32_t
    Dec_RefCount(Obj *self);

    /** Return a host-language object wrapper for this object.
     */
    void*
    To_Host(Obj *self);

    /** Return a clone of the object.
     */
    abstract incremented Obj*
    Clone(Obj *self);

    /** Generic destructor.  Frees the struct itself but not any complex
     * member elements.
     */
    void
    Destroy(Obj *self);

    /** Indicate whether two objects are the same.  By default, compares the
     * memory address.
     *
     * @param other Another Obj.
     */
    public bool_t
    Equals(Obj *self, Obj *other);

    /** Indicate whether one object is less than, equal to, or greater than
     * another.
     *
     * @param other Another Obj.
     * @return 0 if the objects are equal, a negative number if
     * <code>self</code> is less than <code>other</code>, and a positive
     * number if <code>self</code> is greater than <code>other</code>.
     */
    public abstract i32_t
    Compare_To(Obj *self, Obj *other);

    /** Return a hash code for the object -- by default, the memory address.
     */
    i32_t
    Hash_Code(Obj *self);

    /** Return the object's VTable.
     */
    VTable*
    Get_VTable(Obj *self);

    /** Return the name of the class that the object belongs to.
     */
    CharBuf*
    Get_Class_Name(Obj *self);

    /** Indicate whether the object's ancestry includes the supplied parent
     * class name.
     */
    bool_t
    Is_A(Obj *self, VTable *target_vtable);

    /** Generic stringification: "ClassName@hex_mem_address".
     */
    public incremented CharBuf*
    To_String(Obj *self);

    /** Convert the object to a 64-bit integer. 
     */
    public abstract i64_t
    To_I64(Obj *self);

    /** Convert the object to a double precision floating point number.
     */
    public abstract double
    To_F64(Obj *self);

    /** Serialize the object by writing to the supplied OutStream.
     */
    public void
    Serialize(Obj *self, OutStream *outstream);

    /** Inflate an object by reading the serialized form from the instream.
     * The assumption is that the object has been allocated, assigned a
     * refcount and a vtable, but that everything else is uninitialized.  
     * 
     * Implementations should also be prepared to handle NULL as an argument,
     * in which case they should create the object from nothing.
     */
    public incremented Obj*
    Deserialize(Obj *self, InStream *instream);

    /** Return a representation of the object using only scalars, hashes, and
     * arrays.  Some implementations support JSON serialization via Dump() and
     * its companion method, Load(); for others, Dump() is only a debugging
     * aid.  The default simply calls To_String().
     */
    public incremented Obj*
    Dump(Obj *self);

    /** Create an object from the output of a call to Dump().  Implementations
     * should not reference the caller.
     * 
     * @param dump The output of Dump().  
     */
    public abstract incremented Obj*
    Load(Obj *self, Obj *dump);

    /** Update the internal state of the object to mimic that of
     * <code>other</code>. 
     */
    public abstract void
    Mimic(Obj *self, Obj *other);
}

__C__
#include "KinoSearch/Util/Debug.h"

/* Verify that an object belongs to a subclass and not an abstract class.
 * 
 * This check should be performed only after initialization is complete.
 * That way, when the destructor kicks in, it will be dealing with a valid
 * object rather than one which is incomplete and might trigger memory errors.
 */
#define KINO_ABSTRACT_CLASS_CHECK(_self, _vtable) \
    do { \
        kino_Obj *const _obj = (kino_Obj*)_self; \
        if (_obj->vtable == _vtable) { \
            KINO_DECREF(_obj); \
            KINO_THROW(KINO_ERR, "%o is an abstract class", \
                Kino_VTable_Get_Name(_vtable)); \
        } \
    } while (0)

#define KINO_FREE_OBJ(_self) \
    do { \
        KINO_IFDEF_DEBUG( kino_Debug_num_freed++; ); \
        Kino_Obj_Dec_RefCount(_self->vtable); \
        kino_MemMan_wrapped_free(_self); \
    } while (0)

#define KINO_SUPER_DESTROY(_self, _vtable) \
    kino_Obj_super_destroy((kino_Obj*)_self, _vtable)

static CHY_INLINE void
kino_Obj_super_destroy(kino_Obj *self, kino_VTable *vtable)
{
    kino_Obj_destroy_t super_destroy 
        = (kino_Obj_destroy_t)KINO_SUPER_METHOD(vtable, Obj, Destroy);
    super_destroy(self);
}

/* Access an object's refcount.
 */
#define KINO_REFCOUNT(_self) Kino_Obj_Get_RefCount(_self)

/* Increment an object's refcount.  Evaluates to the object, allowing an
 * assignment idiom:
 *
 *    self->foo = (Foo*)INCREF(foo);
 */
#define KINO_INCREF(_self) Kino_Obj_Inc_RefCount(_self)

/* If an object is not NULL, decrement its refcount, calling destroy on it if
 * the refcount drops to 0.
 */
#define KINO_DECREF(_self) kino_Obj_decref((kino_Obj*)_self)

static CHY_INLINE chy_u32_t 
kino_Obj_decref(kino_Obj *self)
{
    if (self != NULL) { return Kino_Obj_Dec_RefCount(self); }
    else { return 0; }
}

/* Obsolete macro synonym for Obj_Is_A.
 */
#define KINO_OBJ_IS_A(var, vtable) (Kino_Obj_Is_A(var, vtable))

/* Function pointer typedefs for common signatures, used to clean up various 
 * function declarations, struct definitions, etc.
 * 
 * TODO: These also belong somewhere else.
 */

/* "qsort" function signature.
 */
typedef int
(*kino_Obj_compare_t)(const void *a, const void *b);

/* PriorityQueue function signature.
 */
typedef chy_bool_t 
(*kino_Obj_less_than_t)(const void *a, const void *b);

/* Dispose of a discarded element.
 */
typedef void
(*kino_Obj_free_elem_t)(void *elem);

#ifdef KINO_USE_SHORT_NAMES
  #define ABSTRACT_CLASS_CHECK(_s,_vt)    KINO_ABSTRACT_CLASS_CHECK(_s,_vt)
  #define FREE_OBJ                        KINO_FREE_OBJ
  #define SUPER_DESTROY(_self, _vtable)   KINO_SUPER_DESTROY(_self, _vtable)
  #define REFCOUNT(_self)                 KINO_REFCOUNT(_self)
  #define INCREF(_self)                   KINO_INCREF(_self)
  #define DECREF(_self)                   KINO_DECREF(_self)
  #define OBJ_IS_A(_self, _vtable)        KINO_OBJ_IS_A(_self, _vtable)
  #define Obj_compare_t                   kino_Obj_compare_t
  #define Obj_less_than_t                 kino_Obj_less_than_t
  #define Obj_free_elem_t                 kino_Obj_free_elem_t
#endif

__END_C__

/* Copyright 2006-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


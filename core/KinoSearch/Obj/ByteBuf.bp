parcel KinoSearch cnick Kino;

/** 
 * Growable buffer holding arbitrary bytes. 
 */ 

class KinoSearch::Obj::ByteBuf cnick BB extends KinoSearch::Obj {

    char    *buf;
    size_t   size;  /* number of valid bytes */
    size_t   cap;   /* allocated bytes, including terminating null */

    /** 
     * @param capacity initial capacity of the ByteBuf, in bytes.
     */
    inert incremented ByteBuf*
    new(size_t capacity);

    inert ByteBuf*
    init(ByteBuf *self, size_t capacity);

    /** Return a pointer to a new ByteBuf which holds a copy of the passed-in
     * string.
     */
    inert incremented ByteBuf*
    new_bytes(const void *bytes, size_t size);

    /** Return a pointer to a new ByteBuf which assumes ownership of the
     * passed-in string.
     */
    inert incremented ByteBuf*
    new_steal_bytes(void *bytes, size_t size, size_t capacity);

    /** Lexical comparison of two ByteBufs, with level of indirection set to
     * please qsort and friends.
     */
    inert int
    compare(const void *va, const void *vb); 

    /** Set the object's size member.  If greater than the object's capacity,
     * throws an error.
     */
    void
    Set_Size(ByteBuf *self, size_t size);

    /** Accessor for "size" member.
     */
    size_t
    Get_Size(ByteBuf *self);

    /** Accessor for raw internal buffer.
     */
    char*
    Get_Buf(ByteBuf *self);

    /** Return the number of bytes in the Object's allocation.
     */
    size_t
    Get_Capacity(ByteBuf *self);

    public void
    Mimic(ByteBuf *self, Obj *other);

    void
    Mimic_Bytes(ByteBuf *self, const void *bytes, size_t size);

    /** Concatenate the passed-in bytes onto the end of the ByteBuf. Allocate
     * more memory as needed.
     */
    void
    Cat_Bytes(ByteBuf *self, const void *bytes, size_t size);

    /** Concatenate the contents of <code>other</code> onto the end of the
     * original ByteBuf. Allocate more memory as needed.
     */
    void
    Cat(ByteBuf *self, const ByteBuf *other);

    /** Assign more memory to the ByteBuf, if it doesn't already have enough
     * room to hold <code>size</code> bytes.  Cannot shrink the allocation.
     *
     * @return a pointer to the raw buffer.
     */
    char*
    Grow(ByteBuf *self, size_t size);

    /** Test whether the ByteBuf matches the passed-in bytes.
     */
    public bool_t
    Equals_Bytes(ByteBuf *self, const void *bytes, size_t size);

    /** Interpret the bytes as an array of 32-bit signed integers and return
     * the value at <code>tick</code>.  Throws an error if <code>tick</code>
     * is out of bounds.
     */
    public i32_t
    I32_Get(ByteBuf *self, u32_t tick);

    /** Return the number of 32-bit integers that fit into the ByteBuf's
     * current buffer.
     */
    public u32_t
    I32_Size(ByteBuf *self);

    incremented ByteBuf*
    Clone(ByteBuf *self);

    void
    Destroy(ByteBuf *self);

    public bool_t
    Equals(ByteBuf *self, Obj *other);

    i32_t
    Hash_Code(ByteBuf *self);

    public void
    Serialize(ByteBuf *self, OutStream *outstream);

    public incremented ByteBuf*
    Deserialize(ByteBuf *self, InStream *instream);
}

/**
 * A ByteBuf that doesn't own its own string.  
 */ 
class KinoSearch::Obj::ViewByteBuf cnick ViewBB
    extends KinoSearch::Obj::ByteBuf {

    /** Return a pointer to a new "view" ByteBuf, offing a persective on the
     * passed-in string.
     */
    inert incremented ViewByteBuf*
    new(char *buf, size_t size);

    /** Assign buf and size members to the passed in values.
     */
    void
    Assign_Bytes(ViewByteBuf *self, char *buf, size_t size);

    /** Assign buf and size members from the passed-in ByteBuf.
     */
    void
    Assign(ViewByteBuf *self, const ByteBuf *other);

    void
    Destroy(ViewByteBuf *self);
}

/* Copyright 2006-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


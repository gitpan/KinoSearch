parcel KinoSearch cnick Kino;

/** Abstract base class for numbers.
 */
abstract class KinoSearch::Obj::Num extends KinoSearch::Obj {

    static Num*
    init(Num *self);

    public bool_t
    Equals(Num *self, Obj *other);

    public i32_t
    Compare_To(Num *self, Obj *other);
}

/** Abstract base class for floating point numbers. 
 */
abstract class KinoSearch::Obj::FloatNum extends KinoSearch::Obj::Num {

    static FloatNum*
    init(FloatNum *self);

    public incremented CharBuf*
    To_String(FloatNum *self);
}


/** Abstract base class for Integers. 
 */
abstract class KinoSearch::Obj::IntNum extends KinoSearch::Obj::Num {

    static IntNum*
    init(IntNum *self);

    public incremented CharBuf*
    To_String(IntNum *self);
}


/** Single precision floating point number.
 */
class KinoSearch::Obj::Float32 extends KinoSearch::Obj::FloatNum {

    float value;

    /**
     * @param value Initial value.
     */
    static Float32*
    init(Float32* self, float value);

    static Float32*
    new(float value);

    void
    Set_Value(Float32 *self, float value);

    float 
    Get_Value(Float32 *self);

    public i64_t
    To_I64(Float32 *self);

    public double
    To_F64(Float32 *self);

    public i32_t
    Hash_Code(Float32 *self);

    public void
    Serialize(Float32 *self, OutStream *outstream);

    public incremented Float32*
    Deserialize(Float32 *self, InStream *instream);

    public incremented Float32*
    Clone(Float32 *self);
}

/** Double precision floating point number.
 */
class KinoSearch::Obj::Float64 extends KinoSearch::Obj::FloatNum {

    double value;

    /**
     * @param value Initial value.
     */
    static Float64*
    init(Float64* self, double value);

    static Float64*
    new(double value);

    void
    Set_Value(Float64 *self, double value);

    double
    Get_Value(Float64 *self);

    public i64_t
    To_I64(Float64 *self);

    public double
    To_F64(Float64 *self);

    public i32_t
    Hash_Code(Float64 *self);

    public void
    Serialize(Float64 *self, OutStream *outstream);

    public incremented Float64*
    Deserialize(Float64 *self, InStream *instream);

    public incremented Float64*
    Clone(Float64 *self);
}

/** 32-bit signed integer.
 */
class KinoSearch::Obj::Integer32 cnick Int32 
    extends KinoSearch::Obj::IntNum {

    i32_t value;

    /**
     * @param value Initial value.
     */
    static Integer32*
    init(Integer32* self, i32_t value);

    static Integer32*
    new(i32_t value);

    void
    Set_Value(Integer32 *self, i32_t value);

    i32_t 
    Get_Value(Integer32 *self);

    public i64_t
    To_I64(Integer32 *self);

    public double
    To_F64(Integer32 *self);

    public i32_t
    Hash_Code(Integer32 *self);

    public void
    Serialize(Integer32 *self, OutStream *outstream);

    public incremented Integer32*
    Deserialize(Integer32 *self, InStream *instream);

    public incremented Integer32*
    Clone(Integer32 *self);
}

/**
 * 64-bit signed integer.
 */
class KinoSearch::Obj::Integer64 cnick Int64 
    extends KinoSearch::Obj::IntNum {

    i64_t value;

    /**
     * @param value Initial value.
     */
    static Integer64*
    init(Integer64* self, i64_t value);

    static Integer64*
    new(i64_t value);

    void
    Set_Value(Integer64 *self, i64_t value);

    i64_t 
    Get_Value(Integer64 *self);

    public i64_t
    To_I64(Integer64 *self);

    public double
    To_F64(Integer64 *self);

    public i32_t
    Hash_Code(Integer64 *self);

    public bool_t
    Equals(Integer64 *self, Obj *other);

    public void
    Serialize(Integer64 *self, OutStream *outstream);

    public incremented Integer64*
    Deserialize(Integer64 *self, InStream *instream);

    public incremented Integer64*
    Clone(Integer64 *self);
}

/* Copyright 2005-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


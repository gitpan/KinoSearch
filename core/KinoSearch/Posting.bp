parcel KinoSearch cnick Kino;

/** Vessel holding statistical data for a posting.
 *
 * A Posting, in KinoSearch, is a vessel which stores information about a
 * term-document match.  (See L<KinoSearch::Docs::IRTheory> for the
 * academic definition of "posting".)
 * 
 * Subclasses include L<MatchPosting|KinoSearch::Posting::MatchPosting>, the
 * simplest posting format, and
 * L<ScorePosting|KinoSearch::Posting::ScorePosting>, the default.
 */
class KinoSearch::Posting cnick Post extends KinoSearch::Util::Stepper {

    i32_t doc_id;

    public static Posting*
    init(Posting *self);

    /** Create a RawPosting object, suitable for index-time sorting.  
     *
     * Updates the state of the document id, but nothing else.
     */
    abstract incremented RawPosting*
    Read_Raw(Posting *self, InStream *instream, i32_t last_doc_id, 
             CharBuf *term_text, MemoryPool *mem_pool);

    /** Process an Inversion into RawPosting objects and add them all to the
     * supplied PostingPool.
     */
    abstract void
    Add_Inversion_To_Pool(Posting *self, PostingPool *post_pool, 
                          Inversion *inversion, FieldType *type, 
                          i32_t doc_id, float doc_boost, 
                          float length_norm);

    public void
    Set_Doc_ID(Posting *self, i32_t doc_id);

    /** Factory method for creating a Matcher.
     */
    abstract incremented Matcher*
    Make_Matcher(Posting *self, Similarity *sim, PostingList *plist, 
                 Compiler *compiler, bool_t need_score);

    abstract incremented PostingStreamer*
    Make_Streamer(Posting *self, DataWriter *writer, i32_t field_num);
}

abstract class KinoSearch::Posting::PostingStreamer cnick PostStreamer
    extends KinoSearch::Index::DataWriter {

    i32_t field_num;

    static PostingStreamer*
    init(PostingStreamer *self, DataWriter *writer, i32_t field_num);

    /** Take a RawPosting that was flattened earlier and write it to the
     * index. */
    abstract void
    Write_Posting(PostingStreamer *self, RawPosting *posting);

    /** Start a new term.  Update the TermInfo to reflect the state of the
     * PostingStreamer. 
     */
    abstract void
    Start_Term(PostingStreamer *self, TermInfo *tinfo);

    /** Update the TermInfo to reflect the internal state of the
     * PostingStreamer so that skip information can be written. 
     * 
     * TODO: This is an ugly hack which needs refactoring.
     */
    abstract void
    Update_Skip_Info(PostingStreamer *self, TermInfo *tinfo);
}

/* Copyright 2007-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


parcel KinoSearch cnick Kino;

/** 
 * Sortable, serialized Posting.
 * 
 * RawPosting is a specialized subclass of Posting for private use only.  It
 * is used at index-time for fast reading, writing, sorting and merging of
 * index posting data by PostingPool.
 * 
 * RawPosting's Destroy method throws an error.  All RawPosting objects belong
 * to a particular MemoryPool, which takes responsibility for freeing them.  
 * 
 * The last struct member, [blob], is a "flexible array" member.  RawPosting
 * objects are assigned one continuous memory block of variable size,
 * depending on how much data needs to fit in blob. 
 * 
 * The first part of blob is the term's text content, the length of which is
 * indicated by [content_len].  At the end of the content, encoded auxilliary
 * posting information begins, ready to be blasted out verbatim to a postings
 * file once the after the doc id is written.
 */

class KinoSearch::Index::RawPosting cnick RawPost
    extends KinoSearch::Posting {

    u32_t     freq;
    u32_t     content_len;
    u32_t     aux_len;
    char[1]   blob; /* flexible array */

    /** Constructor.  Uses pre-allocated memory.
     */
    inert incremented RawPosting*
    new(void *pre_allocated_memory, i32_t doc_id, u32_t freq,
        char *term_text, size_t term_text_len);

    u32_t
    Get_RefCount(RawPosting* self);

    incremented RawPosting*
    Inc_RefCount(RawPosting* self);

    u32_t 
    Dec_RefCount(RawPosting* self);

    /** Throws an error.
     */
    public void
    Destroy(RawPosting *self);
}

class KinoSearch::Posting::RawPostingStreamer cnick RawPostStreamer
    extends KinoSearch::Posting::PostingStreamer {

    OutStream *outstream;
    i32_t      last_doc_id;

    inert incremented RawPostingStreamer*
    new(Schema *schema, Snapshot *snapshot, Segment *segment, 
        PolyReader *polyreader, OutStream *outstream);

    inert RawPostingStreamer*
    init(RawPostingStreamer *self, Schema *schema, Snapshot *snapshot, 
         Segment *segment, PolyReader *polyreader, OutStream *outstream);

    public void
    Destroy(RawPostingStreamer *self);

    void
    Start_Term(RawPostingStreamer *self, TermInfo *tinfo);

    void
    Update_Skip_Info(RawPostingStreamer *self, TermInfo *tinfo);

    void
    Write_Posting(RawPostingStreamer *self, RawPosting *posting);
}

__C__
extern kino_RawPosting KINO_RAWPOSTING_BLANK;

#ifdef KINO_USE_SHORT_NAMES
  #define RAWPOSTING_BLANK         KINO_RAWPOSTING_BLANK
#endif
__END_C__

/* Copyright 2006-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


parcel KinoSearch cnick Kino;

/** Default posting type.
 *
 * ScorePosting is the default posting format in KinoSearch.  The term-document
 * pairing used by MatchPosting is supplemented by additional frequency,
 * position, and weighting information.
 */ 
class KinoSearch::Posting::ScorePosting cnick ScorePost
    extends KinoSearch::Posting::MatchPosting {

    float    weight;
    u32_t   *prox;
    u32_t    prox_cap;

    static incremented ScorePosting*
    new(Similarity *similarity);

    static ScorePosting*
    init(ScorePosting *self, Similarity *similarity);

    void
    Destroy(ScorePosting *self);

    incremented ScorePosting*
    Clone(ScorePosting *self);

    void
    Read_Record(ScorePosting *self, InStream *instream);

    incremented RawPosting*
    Read_Raw(ScorePosting *self, InStream *instream, i32_t last_doc_id, 
             CharBuf *term_text, MemoryPool *mem_pool);

    void
    Add_Inversion_To_Pool(ScorePosting *self, PostingPool *post_pool, 
                          Inversion *inversion, FieldType *type, 
                          i32_t doc_id, float doc_boost, 
                          float length_norm);

    void
    Reset(ScorePosting *self, i32_t doc_id);

    public incremented ScorePostingScorer*
    Make_Matcher(ScorePosting *self, Similarity *sim, PostingList *plist, 
                 Compiler *compiler, bool_t need_score);
}

class KinoSearch::Posting::ScorePostingScorer cnick ScorePostScorer
    extends KinoSearch::Search::TermScorer {

    float *score_cache;

    static ScorePostingScorer*
    init(ScorePostingScorer *self, Similarity *sim, PostingList *plist, 
         Compiler *compiler);

    public float
    Score(ScorePostingScorer* self);

    void
    Destroy(ScorePostingScorer *self);
}

/* Copyright 2007-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


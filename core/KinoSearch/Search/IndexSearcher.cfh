parcel KinoSearch cnick Kino;

/** Execute searches against a single index.
 * 
 * Use the IndexSearcher class to perform search queries against an index.
 * (For searching multiple indexes at once, see
 * L<PolySearcher|KinoSearch::Search::PolySearcher>).
 *
 * IndexSearchers operate against a single point-in-time view or
 * L<Snapshot|KinoSearch::Index::Snapshot> of the index.  If an index is
 * modified, a new IndexSearcher must be opened to access the changes.
 */
class KinoSearch::Search::IndexSearcher cnick IxSearcher 
    inherits KinoSearch::Search::Searcher {

    IndexReader       *reader;
    DocReader         *doc_reader;
    HighlightReader   *hl_reader;
    VArray            *seg_readers;
    I32Array          *seg_starts;

    inert incremented IndexSearcher*
    new(Obj *index);

    /** 
     * @param index Either a string filepath, a Folder, or an IndexReader.
     */
    public inert IndexSearcher*
    init(IndexSearcher *self, Obj *index);

    public void
    Destroy(IndexSearcher *self);

    public int32_t
    Doc_Max(IndexSearcher *self);

    public uint32_t
    Doc_Freq(IndexSearcher *self, const CharBuf *field, Obj *term);

    public void
    Collect(IndexSearcher *self, Query *query, Collector *collector);

    incremented TopDocs*
    Top_Docs(IndexSearcher *self, Query *query, uint32_t num_wanted,
             SortSpec *sort_spec = NULL);

    public incremented Obj*
    Fetch_Doc(IndexSearcher *self, int32_t doc_id, float score = 0.0, 
              int32_t offset = 0);

    incremented DocVector*
    Fetch_Doc_Vec(IndexSearcher *self, int32_t doc_id);

    /** Accessor for the object's <code>reader</code> member.
     */
    public IndexReader*
    Get_Reader(IndexSearcher *self);

    void
    Close(IndexSearcher *self);
}

/* Copyright 2006-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


parcel KinoSearch cnick Kino;

/** Leaf node in a tree created by QueryParser.
 *
 * LeafQuery objects serve as leaf nodes in the tree structure generated by
 * QueryParser's Tree() method.  Ultimately, they must be transformed,
 * typically into either TermQuery or PhraseQuery objects, as attempting to
 * search a LeafQuery causes an error.
 */
class KinoSearch::Search::LeafQuery inherits KinoSearch::Search::Query 
    : dumpable {

    CharBuf *field;
    CharBuf *text;

    inert incremented LeafQuery*
    new(const CharBuf *field = NULL, const CharBuf *text);

    /**
     * @param field Optional field name.
     * @param text Raw query text.
     */
    public inert LeafQuery*
    init(LeafQuery *self, const CharBuf *field = NULL, const CharBuf *text);

    /** Accessor for object's <code>field</code> attribute.
     */
    public nullable CharBuf*
    Get_Field(LeafQuery *self);

    /** Accessor for object's <code>text</code> attribute.
     */
    public CharBuf*
    Get_Text(LeafQuery *self);

    public bool_t
    Equals(LeafQuery *self, Obj *other);

    public incremented CharBuf*
    To_String(LeafQuery *self);

    public void
    Serialize(LeafQuery *self, OutStream *outstream);

    public incremented LeafQuery*
    Deserialize(LeafQuery *self, InStream *instream);

    /** Throws an error.
     */
    public incremented Compiler*
    Make_Compiler(LeafQuery *self, Searcher *searcher, float boost);

    public void
    Destroy(LeafQuery *self);
}

/* Copyright 2008-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


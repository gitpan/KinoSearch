parcel KinoSearch cnick Kino;

/** Aggregate results from multiple searchers.
 *
 * The primary use for PolySearcher is to aggregate results from several
 * remote searchers via L<KSx::Remote::SearchClient>, diffusing the cost of
 * searching a large corpus over multiple machines.  It is also possible to
 * aggregate results from multiple Searchers on a single machine.
 */

class KinoSearch::Search::PolySearcher 
    inherits KinoSearch::Search::Searcher {
    
    VArray    *searchers;
    I32Array  *starts;
    int32_t    doc_max;

    inert incremented PolySearcher*
    new(Schema *schema, VArray *searchers);

    /**
     * @param schema A Schema.
     * @param searchers An array of Searchers.
     */
    public inert PolySearcher*
    init(PolySearcher *self, Schema *schema, VArray *searchers);

    public void
    Destroy(PolySearcher *self);

    public int32_t
    Doc_Max(PolySearcher *self);

    public uint32_t
    Doc_Freq(PolySearcher *self, const CharBuf *field, Obj *term);

    public void
    Collect(PolySearcher *self, Query *query, Collector *collector);

    incremented TopDocs*
    Top_Docs(PolySearcher *self, Query *query, uint32_t num_wanted,
             SortSpec *sort_spec = NULL);

    public incremented Obj*
    Fetch_Doc(PolySearcher *self, int32_t doc_id, float score = 0.0, 
              int32_t offset = 0);

    incremented DocVector*
    Fetch_Doc_Vec(PolySearcher *self, int32_t doc_id);
}

/* Copyright 2006-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


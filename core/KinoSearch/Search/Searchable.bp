parcel KinoSearch cnick Kino;

/** Base class for searchers.
 * 
 * Abstract base class for objects which search.  Core subclasses include
 * L<KinoSearch::Searcher> and L<KinoSearch::Search::PolySearcher>.
 */

class KinoSearch::Search::Searchable extends KinoSearch::Obj {

    Schema      *schema;
    QueryParser *qparser;

    /** Abstract constructor. 
     *
     * @param schema A KinoSearch::Schema.
     */
    public static Searchable*
    init(Searchable *self, Schema *schema);

    void
    Destroy(Searchable *self);

    /** Return the maximum number of docs in the collection represented by
     * the Searchable, which is also the highest possible doc id.  Deleted
     * docs are included in this count.
     */
    public abstract i32_t
    Doc_Max(Searchable *self);

    /** Return the number of documents which contain the term in the given
     * field.
     * 
     * @param field Field name.
     * @param term The term to look up.
     */
    public abstract u32_t
    Doc_Freq(Searchable *self, const CharBuf *field, Obj *term);

    /** If the supplied object is a Query, return it; if it's a query string,
     * create a QueryParser and parse it to produce a query against all
     * indexed fields.
     */
    public incremented Query*
    Glean_Query(Searchable *self, Obj *query = NULL);

    /** Return a Hits object containing the top results.
     *
     * @param query Either a Query object or a query string.
     * @param offset The number of most-relevant hits to discard, typically
     * used when "paging" through hits N at a time.  Setting
     * <code>offset</code> to 20 and <code>num_wanted</code> to 10 retrieves
     * hits 21-30, assuming that 30 hits can be found.
     * @param num_wanted The number of hits you would like to see after
     * <code>offset</code> is taken into account.  
     * @param sort_spec A L<KinoSearch::Search::SortSpec>, which will affect
     * how results are ranked and returned.
     */
    public incremented Hits*
    Hits(Searchable *self, Obj *query, u32_t offset = 0, 
         u32_t num_wanted = 10, SortSpec *sort_spec = NULL);

    /** Iterate over hits, feeding them into a
     * L<HitCollector|KinoSearch::Search::HitCollector>.
     * 
     * @param query A Query.
     * @param collector A HitCollector.
     */
    public abstract void
    Collect(Searchable *self, Query *query, HitCollector *collector);

    /** Return a TopDocs object with up to num_wanted hits.
     */
    abstract incremented TopDocs*
    Top_Docs(Searchable *self, Query *query, u32_t num_wanted,
             SortSpec *sort_spec = NULL);

    /** Retrieve a document.  Throws an error if the doc id is out of range.
     *
     * @param doc_id A document id.
     * @param score A floating point score.
     * @param offset Amount to be added to the doc_id if this Searchable is a
     * subcomponent of another.
     */
    public abstract incremented Obj*
    Fetch_Doc(Searchable *self, i32_t doc_id, float score = 0.0, 
              i32_t offset = 0);

    /** Return the DocVector identified by the supplied doc id.  Throws an
     * error if the doc id is out of range.
     */
    abstract incremented DocVector*
    Fetch_Doc_Vec(Searchable *self, i32_t doc_id);

    /** Accessor for the object's <code>schema</code> member.
     */
    public Schema*
    Get_Schema(Searchable *self);

    /** Release external resources.
     */
    void
    Close(Searchable *self);
}

/* Copyright 2006-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


parcel KinoSearch cnick Kino;

/** An offset, a length, and a weight.
 * 
 * Span objects store information about a span across an array of...
 * something. The unit is context-dependent.
 *
 * Text is one possibility, in which case offset and length might be measured
 * in Unicode code points.  However, the Span could also refer to a span
 * within an array of tokens, for example -- in which case the start and
 * offset might be measured in token positions.  
 */ 
class KinoSearch::Search::Span inherits KinoSearch::Object::Obj {

    int32_t offset;
    int32_t length;
    float   weight;

    inert incremented Span*
    new(int32_t offset, int32_t length, float weight = 0.0);

    /**
     * @param offset Integer offset, unit is context-dependent.
     * @param length Integer length, unit is context-dependent.
     * @param weight A floating point weight.
     */
    public inert Span*
    init(Span *self, int32_t offset, int32_t length, 
         float weight = 0.0);

    /** Accessor for <code>offset</code> attribute.
     */
    public int32_t
    Get_Offset(Span *self);

    /** Setter for <code>offset</code> attribute.
     */
    public void
    Set_Offset(Span *self, int32_t offset);

    /** Accessor for <code>length</code> attribute.
     */
    public int32_t
    Get_Length(Span *self);

    /** Setter for <code>length</code> attribute.
     */
    public void
    Set_Length(Span *self, int32_t length);

    /** Accessor for <code>weight</code> attribute.
     */
    public float
    Get_Weight(Span *self);

    /** Setter for <code>weight</code> attribute.
     */
    public void
    Set_Weight(Span *self, float weight);

    public int32_t
    Compare_To(Span *self, Obj *other);
}

/* Copyright 2008-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


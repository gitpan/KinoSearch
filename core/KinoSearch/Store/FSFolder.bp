parcel KinoSearch cnick Kino;

/** File System implementation of Folder.
 *
 * Implementation of KinoSearch::Store::Folder using a single file system 
 * directory and multiple files.
 */

class KinoSearch::Store::FSFolder extends KinoSearch::Store::Folder {

    Hash    *cf_readers;

    static incremented FSFolder*
    new(const CharBuf *path);

    /**
     * @param path Location of the index. If the specified directory does
     * not exist already, it will NOT be created, in order to prevent
     * misconfigured read applications from spawning bogus files -- so it may
     * be necessary to create the directory yourself.
     */
    public static FSFolder*
    init(FSFolder *self, const CharBuf *path);

    /** Attempt to create the directory specified by <code>path</code>.
     */
    public void
    Initialize(FSFolder *self);

    /** Verify that <code>path</code> is a directory.  TODO: check
     * permissions.
     */
    public bool_t
    Check(FSFolder *self);

    void
    Destroy(FSFolder *self);

    incremented OutStream*
    Open_Out(FSFolder *self, const CharBuf *filepath);

    public incremented InStream*
    Open_In(FSFolder *self, const CharBuf *filepath);

    incremented FileDes*
    Open_FileDes(FSFolder *self, const CharBuf *filepath);

    public void
    MkDir(FSFolder *self, const CharBuf *path);

    incremented VArray*
    List(FSFolder *self);

    bool_t
    Exists(FSFolder *self, const CharBuf *filepath);

    bool_t
    Real_Exists(FSFolder *self, const CharBuf *filepath);

    void
    Rename(FSFolder *self, const CharBuf* from, const CharBuf *to);

    bool_t 
    Delete(FSFolder *self, const CharBuf *filepath);

    bool_t
    Delete_Real(FSFolder *self, const CharBuf *filepath);

    void
    Finish_Segment(FSFolder *self, const CharBuf *seg_name);

    void
    Close(FSFolder *self);
}

/* Copyright 2006-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


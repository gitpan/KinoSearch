parcel KinoSearch cnick Kino;

/** Abstract file stream.
 * 
 * Abstraction of a file descriptor, or perhaps more accurately a file stream
 * a la the c type FILE*.
 * 
 * InStream and OutStream define an interface by which other modules may write
 * to a FileDes.  FileDes implements a lower-level buffered read/write.
 * Subclasses include FSFileDes for reading/writing to disk and RAMFileDes for
 * reading/writing to RAM "files".
 */

abstract class KinoSearch::Store::FileDes extends KinoSearch::Obj {

    CharBuf *path;
    CharBuf *mess;

    inert FileDes*
    init(FileDes *self, const CharBuf *path = NULL);

    /** Ensure that the FileWindow's buffer provides access to the file data
     * for the supplied offset and length. 
     */
    abstract bool_t
    Window(FileDes *self, FileWindow *window, i64_t offset, i64_t len);

    /** Clean up the FileWindow, doing whatever is necessary to free its
     * buffer.
     *
     * @return true on success, false on failure (sets mess)
     */
    abstract bool_t 
    Release_Window(FileDes *self, FileWindow *window);

    /** Copy bytes into from the file's contents into the supplied memory.
     *
     * @param dest Supplied memory.
     * @param offset File position to begin at.
     * @param len Number of bytes to copy.
     * @return true on success, false on failure (sets mess)
     */
    abstract bool_t
    Read(FileDes *self, char *dest, u64_t offset, u32_t len);

    /** Write buffer to target.
     *
     * @return true on success, false on failure (sets mess)
     */
    abstract bool_t
    Write(FileDes *self, const void *buf, u32_t len);

    /** Return the current length of the file in bytes.
     */
    abstract u64_t 
    Length(FileDes *self);

    /** Close the stream, releasing resources.
     *
     * @return true on success, false on failure (sets mess)
     */
    abstract bool_t
    Close(FileDes *self);

    /** Set the object's <code>path</code> attribute.
     */
    void
    Set_Path(FileDes *self, const CharBuf *path);

    /** Return the object's <code>path</code> attribute.
     */
    CharBuf*
    Get_Path(FileDes *self);

    /** Return the object's <code>mess</code> attribute.  May be NULL.
     */
    CharBuf*
    Get_Mess(FileDes *self);

    void
    Destroy(FileDes *self);
}

__C__
/* Integer which is incremented each time a FileDes is created and decremented
 * when a FileDes is destroyed.  Since so many classes use FileDes objects,
 * they're the canary in the coal mine for detecting object-destruction memory
 * leaks.
 */
extern chy_i32_t kino_FileDes_object_count; 

/* Default size for the memory buffer used by both InStream and OutStream.
 */
#define KINO_IO_STREAM_BUF_SIZE 1024

#ifdef KINO_USE_SHORT_NAMES
  #define FileDes_object_count        kino_FileDes_object_count
  #define IO_STREAM_BUF_SIZE          KINO_IO_STREAM_BUF_SIZE
#endif
__END_C__

/* Copyright 2006-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


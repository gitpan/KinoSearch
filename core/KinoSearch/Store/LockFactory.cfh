parcel KinoSearch cnick Kino;

/** Create Locks.
 * 
 * LockFactory is used to spin off interprocess mutex locks used by various
 * index reading and writing components.  The default implementation uses
 * lockfiles, but LockFactory subclasses which are implemented using
 * alternatives such as flock() are possible.
 */

class KinoSearch::Store::LockFactory cnick LockFact
    inherits KinoSearch::Object::Obj {

    Folder  *folder;
    CharBuf *host;

    inert incremented LockFactory*
    new(Folder *folder, const CharBuf *host);

    /**
     * @param folder A L<KinoSearch::Store::Folder>.
     * @param host An identifier which should be unique per-machine.
     */
    public inert LockFactory*
    init(LockFactory *self, Folder *folder, const CharBuf *host);

    /** Return a Lock object, which, once Obtain() returns successfully,
     * maintains an exclusive lock on a resource.
     *
     * @param name A file-system-friendly id which identifies the
     * resource to be locked.
     * @param timeout Time in milliseconds to keep retrying before abandoning
     * the attempt to Obtain() a lock.
     * @param interval Time in milliseconds between retries.
     */
    public incremented Lock*
    Make_Lock(LockFactory *self, const CharBuf *name, int32_t timeout = 0,
              int32_t interval = 100);

    /** Return a Lock object for which Shared() returns true, and which
     * maintains a non-exclusive lock on a resource once Obtain() returns
     * success.
     *
     * @param name A file-system-friendly id which identifies the
     * resource to be locked.
     * @param timeout Time in milliseconds to keep retrying before abandoning
     * the attempt to Obtain() a lock.
     * @param interval Time in milliseconds between retries.
     */
    public incremented Lock*
    Make_Shared_Lock(LockFactory *self, const CharBuf *name, 
                     int32_t timeout = 0, int32_t interval = 100);

    public void
    Destroy(LockFactory *self);
}

/* Copyright 2007-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


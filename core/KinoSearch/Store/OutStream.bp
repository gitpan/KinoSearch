parcel KinoSearch cnick Kino;

/** Filehandles for writing to an index.
 * 
 * The OutStream class abstracts all of KinoSearch's output operations. 
 * 
 * Unlike its counterpart InStream, OutStream cannot be assigned an arbitrary
 * length or offset.
 * 
 * OutStream objects maintain their own buffers and write their contents to
 * disk on their own schedules.
 */ 

final class KinoSearch::Store::OutStream extends KinoSearch::Obj {

    char          *buf;
    u64_t          buf_start;
    u32_t          buf_pos;
    FileDes       *file_des;
    CharBuf       *path;

    static incremented OutStream* 
    new(FileDes *file_des);

    static OutStream* 
    init(OutStream *self, FileDes *file_des);

    /** Return the current file position. 
     */
    u64_t 
    Tell(OutStream *self);

    /** Flush output buffer to target FileDes.
     */
    void
    Flush(OutStream *self);

    /** Return the current length of the file in bytes.
     */
    u64_t 
    Length(OutStream *self);

    /** Write [len] bytes from [buf] to the OutStream.
     */
    void
    Write_Bytes(OutStream *self, const void *buf, size_t len);

    /** Write a single signed byte to the OutStream. 
     */
    void
    Write_I8(OutStream *self, i8_t aI8);

    /** Write a single unsigned byte to the OutStream. 
     */
    void
    Write_U8(OutStream *self, u8_t aU8);

    /** Write a signed 32-bit integer to the OutStream.
     */
    void
    Write_I32(OutStream *self, i32_t anI32);

    /** Write an unsigned 32-bit integer to the OutStream.
     */
    void
    Write_U32(OutStream *self, u32_t aU32);

    /** Write a signed 64-bit integer to the OutStream.
     */
    void
    Write_I64(OutStream *self, i64_t anI64);

    /** Write an unsigned 64-bit integer to the OutStream.
     */
    void
    Write_U64(OutStream *self, u64_t aU64);

    /** Write a 32-bit integer using a compressed format.
     */
    void
    Write_C32(OutStream *self, u32_t aU32);

    /** Write a 64-bit integer using a compressed format.
     */
    void
    Write_C64(OutStream *self, u64_t aU64);

    /** Write an IEEE 764 float in big-endian byte order.
     */
    void
    Write_Float(OutStream *self, float aFloat);

    /** Write a string as a C32 indicating length of content in bytes, followed by
     * the content.
     */
    void 
    Write_String(OutStream *self, const char *buf, size_t len);

    /** Write the entire contents of an instream to an outstream.
     */
    void 
    Absorb(OutStream *self, InStream *instream);

    /** Close down the stream.
     */
    void 
    Close(OutStream *self);

    void 
    Destroy(OutStream *self);
}

/* Copyright 2006-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


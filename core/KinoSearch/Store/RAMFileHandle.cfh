parcel KinoSearch cnick Kino;

/** In-memory FileHandle.
 * 
 * RAM-based implementation of FileHandle, to be used in conjunction with
 * RAMFolder.
 */ 
class KinoSearch::Store::RAMFileHandle cnick RAMFH
    inherits KinoSearch::Store::FileHandle {

    RAMFile *ram_file;
    int64_t  len;

    inert incremented nullable RAMFileHandle*
    open(const CharBuf *path = NULL, uint32_t flags, RAMFile *file = NULL);

    /** 
     * Return a new RAMFileHandle, or set Err_error and return NULL on
     * failure.
     * 
     * @param path Filepath.
     * @param flags FileHandle flags.
     * @param file An existing RAMFile; if not supplied, the FH_CREATE flag
     * must be passed or an error will occur.
     */
    inert nullable RAMFileHandle*
    do_open(RAMFileHandle *self, const CharBuf *path = NULL, uint32_t flags,
            RAMFile *file = NULL);

    /** Access the backing RAMFile. 
     */
    RAMFile*
    Get_File(RAMFileHandle *self);

    bool_t 
    Grow(RAMFileHandle *self, int64_t len);

    public void
    Destroy(RAMFileHandle *self);

    bool_t
    Window(RAMFileHandle *self, FileWindow *window, int64_t offset, int64_t len);

    bool_t 
    Release_Window(RAMFileHandle *self, FileWindow *window);

    bool_t
    Read(RAMFileHandle *self, char *dest, int64_t offset, size_t len);

    bool_t
    Write(RAMFileHandle *self, const void *data, size_t len);

    int64_t
    Length(RAMFileHandle *self);

    bool_t
    Close(RAMFileHandle *self);
}

/* Copyright 2006-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


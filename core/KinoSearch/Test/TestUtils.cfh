parcel KinoSearch cnick Kino;

inert class KinoSearch::Test::TestUtils  {

    /** Testing-only CharBuf factory which uses strlen().
     */
    inert incremented CharBuf* 
    get_cb(const char *utf8);

    /** Return a random unsigned 64-bit integer. 
     */
    inert uint64_t
    random_u64();

    /** Return an array of <code>count</code> random 64-bit integers where
     * <code>min <= n < limit</code>.
     *
     * If <code>buf</code> is NULL, it will be allocated, otherwise it will
     * be used.
     */
    inert int64_t*
    random_i64s(int64_t *buf, size_t count, int64_t min, int64_t limit);

    /** Return an array of <code>count</code> random unsigned, 64-bit integers
     * where <code>min <= n < limit</code>.
     *
     * If <code>buf</code> is NULL, it will be allocated, otherwise it will
     * be used.
     */
    inert uint64_t*
    random_u64s(uint64_t *buf, size_t count, uint64_t min, uint64_t limit);

    /** Return an array of <code>count</code> random double-precision floating
     * point numbers between 0 and 1.
     *
     * If <code>buf</code> is NULL, it will be allocated, otherwise it will
     * be used.
     */
    inert double*
    random_f64s(double *buf, size_t count);

    /** Return a VArray of CharBufs, each representing the content for a
     * document in the shared collection.
     */
    inert incremented VArray*
    doc_set();

    /** Testing-only TermQuery factory.
     */
    inert incremented TermQuery*
    make_term_query(const char *field, const char *term);

    /** Testing-only PhraseQuery factory.
     */
    inert incremented PhraseQuery*
    make_phrase_query(const char *field, ...);

    /** Testing-only LeafQuery factory.
     */
    inert incremented LeafQuery*
    make_leaf_query(const char *field, const char *term);

    /** Return a new NOTQuery, decrementing the refcount for
     * <code>negated_query</code>.
     */
    inert incremented NOTQuery*
    make_not_query(Query *negated_query);

    inert incremented RangeQuery*
    make_range_query(const char *field, const char *lower_term = NULL, 
                     const char *upper_term = NULL, 
                     bool_t include_lower = true, 
                     bool_t include_upper = true);

    /** Return either an ORQuery or an ANDQuery depending on the value of
     * <code>boolop</code>.  Takes a NULL-terminated list of Query objects.
     * Decrements the refcounts of all supplied children, under the assumption
     * that they were created solely for inclusion within the aggregate query.
     */
    inert incremented PolyQuery*
    make_poly_query(uint32_t boolop, ...);

    /** Return the result of round-tripping the object through FREEZE and
     * THAW. 
     */
    inert incremented Obj*
    freeze_thaw(Obj *object);
}

__C__

#define KINO_TESTUTILS_BOOLOP_OR  1
#define KINO_TESTUTILS_BOOLOP_AND 2
#ifdef KINO_USE_SHORT_NAMES
  #define BOOLOP_OR        KINO_TESTUTILS_BOOLOP_OR
  #define BOOLOP_AND       KINO_TESTUTILS_BOOLOP_AND
#endif

__END_C__

/* Copyright 2005-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


parcel KinoSearch cnick Kino;

/** An array of bits.
 *
 * BitVector is a growable array of bits.  All bits are initially zero.
 */

class KinoSearch::Util::BitVector cnick BitVec
    extends KinoSearch::Obj {

    u32_t  cap;
    u8_t  *bits;

    static incremented BitVector* 
    new(u32_t capacity = 0);

    /**
     * @param capacity The number of bits that the initial array should be
     * able to hold.
     */
    public static BitVector* 
    init(BitVector *self, u32_t capacity = 0);

    /** Return true if the bit indicated has been set, false if it
     * hasn't. (Regardless of whether it lies within the bounds of the
     * object's capacity).
     *
     * @param tick The requested bit.
     */
    public bool_t
    Get(BitVector *self, u32_t tick);

    /** Set the indicated bit at to 1.
     * 
     * @param tick The bit to be set.
     */
    public void
    Set(BitVector *self, u32_t tick);

    /** Accessor for capacity.
     */
    u32_t
    Get_Cap(BitVector *self);

    /** Returns the next set bit equal to or greater than the supplied tick,
     * or -1 if no such bit exists.
     */
    public i32_t
    Next_Set_Bit(BitVector *self, u32_t tick);

    /** Clear the indicated bit. (i.e. set it to 0).
     * 
     * @param tick The bit to be cleared.
     */
    public void
    Clear(BitVector *self, u32_t tick);

    /** Clear all bits.
     */
    public void
    Clear_All(BitVector *self);

    /** If the BitVector does not already have enough room to hold the
     * indicated number of bits, allocate more memory so that it can.
     * 
     * @param capacity Least number of bits the BitVector should accomodate.
     */
    public void
    Grow(BitVector *self, u32_t capacity);

    /** Modify the contents of this BitVector so that it has the same bits set
     * as <code>other</code>.
     *
     * @param other Another BitVector.
     */
    public void
    Copy(BitVector *self, BitVector *other);

    /** Modify the BitVector so that only bits which remain set are those
     * which 1) were already set in this BitVector, and 2) were also set in
     * the other BitVector.
     * 
     * @param other Another BitVector.
     */
    public void
    And(BitVector *self, const BitVector *other);

    /** Modify the BitVector, setting all bits which are set in the other
     * BitVector if they were not already set.
     * 
     * @param other Another BitVector.
     */
    public void
    Or(BitVector *self, const BitVector *other);

    /** Modify the BitVector, performing an XOR operation against the other.
     * 
     * @param other Another BitVector.
     */
    public void
    Xor(BitVector *self, const BitVector *other);

    /** Modify the BitVector, clearing all bits which are set in the other.
     * 
     * @param other Another BitVector.
     */
    public void
    And_Not(BitVector *self, const BitVector *other);

    /** Invert the value of a bit.
     * 
     * @param tick The bit to invert.
     */
    public void
    Flip(BitVector *self, u32_t tick); 

    /** Invert each bit within a contiguous block.
     * 
     * @param offset Lower bound.
     * @param length The number of bits to flip.
     */
    public void
    Flip_Block(BitVector *self, u32_t offset, u32_t length);

    /** Return a count of the number of set bits.
     */
    public u32_t
    Count(BitVector *self);

    /** Return an array where each element represents a set bit.
     */
    public incremented I32Array*
    To_Array(BitVector *self);

    void
    Destroy(BitVector *self);

    incremented BitVector* 
    Clone(BitVector *self);
}

/* Copyright 2006-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


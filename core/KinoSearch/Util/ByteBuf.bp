parcel KinoSearch cnick Kino;

/** 
 * Growable buffer holding arbitrary bytes. 
 */ 

class KinoSearch::Util::ByteBuf cnick BB extends KinoSearch::Obj {

    char    *ptr;
    size_t   size;  /* number of valid bytes */
    size_t   cap;   /* allocated bytes, including terminating null */

    /** 
     * @param capacity initial capacity of the ByteBuf, in bytes.
     */
    static incremented ByteBuf*
    new(size_t capacity);

    static ByteBuf*
    init(ByteBuf *self, size_t capacity);

    /** Return a pointer to a new ByteBuf which holds a copy of the passed-in
     * string.
     */
    static incremented ByteBuf*
    new_str(const char *ptr, size_t size);

    /** Return a pointer to a new ByteBuf which assumes ownership of the
     * passed-in string.
     */
    static incremented ByteBuf*
    new_steal_str(char *ptr, size_t size, size_t capacity);

    /** Lexical comparison of two ByteBufs, with level of indirection set to
     * please qsort and friends.
     */
    static int
    compare(const void *va, const void *vb); 

    /** Set the object's size member.  If greater than the object's capacity,
     * throws an error.
     */
    void
    Set_Size(ByteBuf *self, size_t size);

    /** Accessor for "size" member.
     */
    size_t
    Get_Size(ByteBuf *self);

    /** Return the number of bytes in the Object's allocation.
     */
    size_t
    Get_Capacity(ByteBuf *self);

    /** Copy the passed-in bytes into the ByteBuf.  Allocate more memory if
     * necessary. 
     */
    void
    Copy_Str(ByteBuf *self, const char *ptr, size_t size);

    /** Copy the contents of <code>other</code> into the original ByteBuf.  
     * Allocate more memory if necessary. 
     */
    void
    Copy(ByteBuf *self, const ByteBuf *other);

    /** Concatenate the passed-in bytes onto the end of the ByteBuf. Allocate
     * more memory as needed.
     */
    void
    Cat_Str(ByteBuf *self, const char *ptr, size_t size);

    /** Concatenate the contents of <code>other</code> onto the end of the
     * original ByteBuf. Allocate more memory as needed.
     */
    void
    Cat(ByteBuf *self, const ByteBuf *other);

    /** Assign more memory to the ByteBuf, if it doesn't already have enough
     * room to hold <code>size</code> bytes.  Cannot shrink the allocation.
     */
    void
    Grow(ByteBuf *self, size_t size);

    /** Test whether the ByteBuf matches the passed-in bytes.
     */
    public bool_t
    Equals_Str(ByteBuf *self, const char *ptr, size_t size);

    incremented ByteBuf*
    Clone(ByteBuf *self);

    void
    Destroy(ByteBuf *self);

    public bool_t
    Equals(ByteBuf *self, Obj *other);

    i32_t
    Hash_Code(ByteBuf *self);

    public void
    Serialize(ByteBuf *self, OutStream *outstream);

    public incremented ByteBuf*
    Deserialize(ByteBuf *self, InStream *instream);
}

/**
 * A ByteBuf that doesn't own its own string.  
 */ 
class KinoSearch::Util::ViewByteBuf cnick ViewBB
    extends KinoSearch::Util::ByteBuf {

    /** Return a pointer to a new "view" ByteBuf, offing a persective on the
     * passed-in string.
     */
    static incremented ViewByteBuf*
    new(char *ptr, size_t size);

    /** Assign ptr and size members to the passed in values.
     */
    void
    Assign_Str(ViewByteBuf *self, char *ptr, size_t size);

    /** Assign ptr and size members from the passed-in ByteBuf.
     */
    void
    Assign(ViewByteBuf *self, const ByteBuf *other);

    void
    Destroy(ViewByteBuf *self);
}

__C__

#define KINO_BBEND(self) ((self)->ptr + (self)->size)

#ifdef KINO_USE_SHORT_NAMES
  #define BBEND(self)         KINO_BBEND(self)
#endif
__END_C__

/* Copyright 2006-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


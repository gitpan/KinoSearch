parcel KinoSearch cnick Kino;

__C__
static const chy_u8_t kino_IntArr_u1masks[] = {
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80,
};

static CHY_INLINE chy_bool_t
kino_IntArr_u1get(void *array, chy_u32_t tick) 
{
    chy_u8_t *u8bits = (chy_u8_t*)array;
    return !((u8bits[ (tick >> 3) ] & kino_IntArr_u1masks[tick & 0x7]) == 0);
}

static CHY_INLINE void 
kino_IntArr_u1set(void *array, chy_u32_t tick) 
{
    chy_u8_t *u8bits = (chy_u8_t*)array;
    u8bits[ (tick >> 3) ]  |= kino_IntArr_u1masks[tick & 0x7];
}

static const chy_u8_t kino_IntArr_u2shifts[] = { 0x0, 0x2, 0x4,  0x6  };
static const chy_u8_t kino_IntArr_u2masks[]  = { 0x3, 0xC, 0x30, 0xC0 };

static CHY_INLINE chy_u8_t
kino_IntArr_u2get(void *array, chy_u32_t tick) 
{
    chy_u8_t *ints  = (chy_u8_t*)array;
    chy_u8_t  byte  = ints[ (tick >> 2) ];
    int       shift = kino_IntArr_u2shifts[ tick & 0x3 ];
    return (byte >> shift) & 0x3;
}

static CHY_INLINE void 
kino_IntArr_u2set(void *array, chy_u32_t tick, chy_u8_t value) 
{
    chy_u8_t *ints     = (chy_u8_t*)array;
    unsigned  sub_tick = tick & 0x3;
    int       shift    = kino_IntArr_u2shifts[sub_tick];
    chy_u8_t  mask     = kino_IntArr_u2masks[sub_tick];
    chy_u8_t  new_val  = value & 0x3;
    chy_u8_t  new_bits = new_val << shift;
    ints[(tick >> 2)]  = (ints[(tick >> 2)] & ~mask) | new_bits;
}

static const chy_u8_t kino_IntArr_u4shifts[] = { 0x00, 0x04 };
static const chy_u8_t kino_IntArr_u4masks[]  = { 0x0F, 0xF0 };

static CHY_INLINE chy_u8_t
kino_IntArr_u4get(void *array, chy_u32_t tick) 
{
    chy_u8_t *ints  = (chy_u8_t*)array;
    chy_u8_t  byte  = ints[ (tick >> 1) ];
    int       shift = kino_IntArr_u4shifts[(tick & 1)]; 
    return (byte >> shift) & 0xF;
}

static CHY_INLINE void 
kino_IntArr_u4set(void *array, chy_u32_t tick, chy_u8_t value) 
{
    chy_u8_t *ints     = (chy_u8_t*)array;
    unsigned  sub_tick = tick & 0x1;
    int       shift    = kino_IntArr_u4shifts[sub_tick];
    chy_u8_t  mask     = kino_IntArr_u4masks[sub_tick];
    chy_u8_t  new_val  = value & 0xF;
    chy_u8_t  new_bits = new_val << shift;
    ints[(tick >> 1)]  = (ints[(tick >> 1)] & ~mask) | new_bits;
}

#ifdef KINO_USE_SHORT_NAMES
  #define IntArr_u1get     kino_IntArr_u1get
  #define IntArr_u1set     kino_IntArr_u1set
  #define IntArr_u2get     kino_IntArr_u2get
  #define IntArr_u2set     kino_IntArr_u2set
  #define IntArr_u4get     kino_IntArr_u4get
  #define IntArr_u4set     kino_IntArr_u4set
  #define IntArr_u1masks   kino_IntArr_u1masks
  #define IntArr_u2shifts  kino_IntArr_u2shifts
  #define IntArr_u2masks   kino_IntArr_u2masks
  #define IntArr_u4shifts  kino_IntArr_u4shifts
  #define IntArr_u4masks   kino_IntArr_u4masks
#endif

__END_C__

/** Utilities for unbounded integer arrays of various widths.
 */
static class KinoSearch::Util::IntArrays cnick IntArr { }

/* Copyright 2006-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


parcel KinoSearch cnick Kino;

inert class KinoSearch::Util::MemManager cnick MemMan {

    /** Attempt to allocate memory with malloc, but print an error and exit if the
     * call fails.
     */
    inert void*
    wrapped_malloc(size_t count);

    /** Attempt to allocate memory with calloc, but print an error and exit if the
     * call fails.
     */
    inert void*
    wrapped_calloc(size_t count, size_t size);

    /** Attempt to allocate memory with realloc, but print an error and exit if 
     * the call fails.
     */
    inert void*
    wrapped_realloc(void *ptr, size_t size);

    /** Free memory.  (Wrapping is necessary in cases where memory allocated
     * within the KinoSearch library has to freed in an external environment where
     * "free" may have been redefined.)
     */
    inert void
    wrapped_free(void *ptr);
}

__C__

#define KINO_MALLOCATE(n,t) \
    (t*)kino_MemMan_wrapped_malloc((n)*sizeof(t))
#define KINO_CALLOCATE(n,t) \
    (t*)kino_MemMan_wrapped_calloc((n),sizeof(t))
#define KINO_REALLOCATE(v,n,t) \
    (t*)kino_MemMan_wrapped_realloc((v), (n)*sizeof(t))
#define KINO_FREEMEM(_pointer) \
    kino_MemMan_wrapped_free(_pointer)

#ifdef KINO_USE_SHORT_NAMES
  #define MALLOCATE(n,t)                  KINO_MALLOCATE(n,t)
  #define CALLOCATE(n,t)                  KINO_CALLOCATE(n,t)
  #define REALLOCATE(v,n,t)               KINO_REALLOCATE(v,n,t)
  #define FREEMEM(_pointer)               KINO_FREEMEM(_pointer)
#endif

__END_C__

/* Copyright 2006-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


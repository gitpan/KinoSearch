parcel KinoSearch cnick Kino;

/**
 * Specialized memory allocator.
 * 
 * Grab memory from the system in 1 MB chunks.  Don't release it until object
 * destruction.  Parcel the memory out on request.  
 * 
 * The release mechanism is fast but extremely crude, limiting the use of this
 * class to specific applications.
 */

class KinoSearch::Util::MemoryPool cnick MemPool
    inherits KinoSearch::Object::Obj {

    uint32_t     arena_size;
    VArray      *arenas;
    int32_t      tick;
    char        *buf;
    char        *last_buf;
    char        *limit;
    size_t       consumed; /* bytes allocated (not cap) */

    /**
     * @param arena_size The size of each internally allocated memory slab.
     * If 0, it will be set to 1 MiB.
     */
    inert incremented MemoryPool*
    new(uint32_t arena_size);

    inert MemoryPool*
    init(MemoryPool *self, uint32_t arena_size);

    /** Allocate memory from the pool.
     */
    void*
    Grab(MemoryPool *self, size_t amount);

    /** Resize the last allocation. (*Only* the last allocation).
     */
    void
    Resize(MemoryPool *self, void *ptr, size_t revised_amount);

    /** Tell the pool to consider all previous allocations released.
     */
    void
    Release_All(MemoryPool *self);

    /** Take ownership of all the arenas in another MemoryPool.  Can only be
     * called when the original memory pool has no outstanding allocations,
     * typically just after a call to Release_All.  The purpose is to support
     * bulk reallocation.
     */
    void
    Eat(MemoryPool *self, MemoryPool *other);

    size_t
    Get_Consumed(MemoryPool *self);

    public void
    Destroy(MemoryPool *self);
}

/* Copyright 2006-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


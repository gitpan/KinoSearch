parcel KinoSearch cnick Kino;

__C__
#include <stddef.h>
#include "KinoSearch/Util/MSort.h"
__END_C__

/**
 * An externally sorted run.
 *
 * Abstract base class representing a sorted run created by a SortExternal
 * object.
 * 
 */

class KinoSearch::Util::SortExRun extends KinoSearch::Obj {

    Obj     **cache;
    u32_t     cache_cap;
    u32_t     cache_max;
    u32_t     cache_tick;

    static SortExRun*
    init(SortExRun *self);

    /** Compare two sortable elements.
     */
    abstract int
    Compare(SortExRun *self, Obj **a, Obj **b);

    /** Refill the cache, adding elements via SortExRun_Read_Elem until it
     * returns NULL.  Return the number of elements recovered.  May only be
     * called when the Run is empty.
     */
    u32_t
    Refill(SortExRun *self);

    /** Recover individual elements from external storage in sorted order.
     * Returns NULL when the SortExRun decides that the cache is full enough.
     */
    abstract Obj*
    Read_Elem(SortExRun *self);

    /** Allocate more memory to the Run's cache.
     */
    void
    Grow_Cache(SortExRun *self, u32_t new_cache_cap);

    /** Return the cache item with the highest sort value currently held in
     * memory.  Calling this method when there are no cached items is invalid.
     */
    final Obj*
    Peek_Last(SortExRun *self);

    /** Yield the slice of the cache containing all elements which are less
     * than or equal to <code>endpost</code>.  Returns a pointer to the
     * elements, and places the number of elements popped into
     * <code>slice_size</code>.
     */
    final
    Obj** Pop_Slice(SortExRun *self, Obj *endpost, u32_t *slice_size);

    /** Release existing cache elements, if any.  Reset cache vars.
     */
    void
    Clear_Cache(SortExRun *self);

    void
    Destroy(SortExRun *self);
}

__C__
#define KINO_SORTEXRUN_CACHE_COUNT(_run) \
    (_run->cache_max - _run->cache_tick)

#ifdef KINO_USE_SHORT_NAMES
  #define SORTEXRUN_CACHE_COUNT(_run)     KINO_SORTEXRUN_CACHE_COUNT(_run)
#endif 
__END_C__

/* Copyright 2006-2009 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


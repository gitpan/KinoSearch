parcel KinoSearch cnick Kino;

__C__
typedef int 
(*kino_Sort_compare_t)(void *context, const void *va, const void *vb);
#ifdef KINO_USE_SHORT_NAMES
  #define Sort_compare_t            kino_Sort_compare_t
#endif
__END_C__

/** Specialized sorting routines.
 * 
 * SortUtils provides a merge sort algorithm which allows access to its
 * internals, enabling specialized functions to jump in and only execute part
 * of the sort.
 * 
 * SortUtils also provides a quicksort with an additional context argument.
 */
inert class KinoSearch::Util::SortUtils cnick Sort {

    /** Perform a mergesort.  In addition to providing a contiguous array of
     * elements to be sorted and their count, the caller must also provide a
     * scratch buffer with room for at least as many elements as are to be
     * sorted.
     */
    inert void
    mergesort(void *elems, void *scratch, uint32_t num_elems, uint32_t width,
              Sort_compare_t compare, void *context);

    /** Merge two source arrays together using the classic mergesort merge
     * algorithm, storing the result in <code>dest</code>.
     * 
     * Most merge functions operate on a single contiguous array and copy the
     * merged results results back into the source array before returning.
     * These two differ in that it is possible to operate on two discontiguous
     * source arrays.  Copying the results back into the source array is the
     * responsibility of the caller.
     * 
     * KinoSearch's external sort takes advantage of this when it is reading
     * back pre-sorted runs from disk and merging the streams into a
     * consolidated buffer.
     */
    inert void
    merge(void *left_ptr,  uint32_t left_num_elems,
          void *right_ptr, uint32_t right_num_elems,
          void *dest, size_t width, Sort_compare_t compare, void *context);

    /** Quicksort. 
     */
    inert void
    quicksort(void *elems, size_t num_elems, size_t width, 
              Sort_compare_t compare, void *context);
}

/* Copyright 2006-2010 Marvin Humphrey
 *
 * This program is free software; you can redistribute it and/or modify
 * under the same terms as Perl itself.
 */


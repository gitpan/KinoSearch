
# Auto-generated file -- DO NOT EDIT!!!!!

=head1 NAME

KinoSearch::Index::IndexReader - Read from an inverted index.

=head1 SYNOPSIS

    my $reader = KinoSearch::Index::IndexReader->open(
        index => '/path/to/index',
    );
    my $seg_readers = $reader->seg_readers;
    for my $seg_reader (@$seg_readers) {
        my $seg_name = $seg_reader->get_segment->get_name;
        my $num_docs = $seg_reader->doc_max;
        print "Segment $seg_name ($num_docs documents):\n";
        my $doc_reader = $seg_reader->obtain("KinoSearch::Index::DocReader");
        for my $doc_id ( 1 .. $num_docs ) {
            my $doc = $doc_reader->fetch($doc_id);
            print "  $doc_id: $doc->{title}\n";
        }
    }



=head1 DESCRIPTION

IndexReader is the interface through which Searchers access the content of
an index.

IndexReader objects always represent a point-in-time view of an index as it
existed at the moment the reader was created.  If you want search results
to reflect modifications to an index, you must create a new IndexReader
after the update process completes.

IndexReaders are composites; most of the work is done by individual
L<DataReader|KinoSearch::Index::DataReader> sub-components, which may be
accessed via fetch() and obtain().  The most efficient and powerful access
to index data happens at the segment level via
L<SegReader|KinoSearch::Index::SegReader>'s sub-components.

=head1 CONSTRUCTORS

=head2 open( I<[labeled params]> )

    my $reader = KinoSearch::Index::IndexReader->open(
        index        => '/path/to/index', # required
        snapshot     => $snapshot,
        lock_factory => $lock_factory,
    );

IndexReader is an abstract base class; open() returns the IndexReader
subclass PolyReader, which channels the output of several SegReaders.

=over

=item *

B<index> - Either a string filepath or a L<KinoSearch::Folder>.

=item *

B<snapshot> - A Snapshot.  If not supplied, the most recent snapshot
file will be used.

=item *

B<lock_factory> - A L<KinoSearch::Store::LockFactory>.  Read-locking
is off by default; supplying this argument turns it on.

=back



=head1 METHODS

=head2 fetch(api)

Fetch a component, or return undef if the component can't be found.

=over

=item *

B<api> - The name of the DataReader subclass that the desired
component must implement.

=back

=head2 obtain(api)

Fetch a component, or throw an error if the component can't be found.

=over

=item *

B<api> - The name of the DataReader subclass that the desired
component must implement.

=back



=head1 ABSTRACT METHODS

=head2 doc_max()

Return the maximum number of documents available to the reader, which
is also the highest possible document id.  Documents which have been
marked as deleted but not yet purged from the index are included in
this count.

=head2 doc_count()

Return the number documents available to the reader, subtracting
any that are marked as deleted.

=head2 del_count()

Return the number of documents which have been marked as deleted.

=head2 seg_readers()

Return an array of all the SegReaders represented within the
IndexReader.

=head2 offsets()

Return an array with one entry for each segment, corresponding to
segment doc_id start offset.



=head1 INHERITANCE

KinoSearch::Index::IndexReader isa L<KinoSearch::Index::DataReader> isa L<KinoSearch::Obj>.


=head1 COPYRIGHT

Copyright 2005-2009 Marvin Humphrey

=head1 LICENSE, DISCLAIMER, BUGS, etc.

See L<KinoSearch> version 0.30.

=cut


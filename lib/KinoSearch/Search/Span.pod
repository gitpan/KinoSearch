
# Auto-generated file -- DO NOT EDIT!!!!!

=head1 NAME

KinoSearch::Search::Span - An offset, a length, and a weight.

=head1 SYNOPSIS

    my $combined_length = $upper_span->get_length
        + ( $upper_span->get_offset - $lower_span->get_offset );
    my $combined_span = KinoSearch::Search::Span->new(
        offset => $lower_span->get_offset,
        length => $combined_length,
    );
    ...



=head1 DESCRIPTION

Span objects store information about a span across an array of...
something. The unit is context-dependent.

Text is one possibility, in which case offset and length might be measured
in Unicode code points.  However, the Span could also refer to a span
within an array of tokens, for example -- in which case the start and
offset might be measured in token positions.

=head1 CONSTRUCTORS

=head2 new( I<[labeled params]> )

    my $span = KinoSearch::Search::Span->new(
        offset => 75,     # required
        length => 7,      # required
        weight => 1.0,    # default 0.0
    );

=over

=item *

B<offset> - Integer offset, unit is context-dependent.

=item *

B<length> - Integer length, unit is context-dependent.

=item *

B<weight> - A floating point weight.

=back



=head1 METHODS

=head2 set_offset(offset)

Setter for C<< offset >> attribute.

=head2 get_offset()

Accessor for C<< offset >> attribute.

=head2 set_length(length)

Setter for C<< length >> attribute.

=head2 get_length()

Accessor for C<< length >> attribute.

=head2 set_weight(weight)

Setter for C<< weight >> attribute.

=head2 get_weight()

Accessor for C<< weight >> attribute.





=head1 INHERITANCE

KinoSearch::Search::Span isa L<KinoSearch::Obj>.


=head1 COPYRIGHT

Copyright 2005-2009 Marvin Humphrey

=head1 LICENSE, DISCLAIMER, BUGS, etc.

See L<KinoSearch> version 0.30.

=cut

